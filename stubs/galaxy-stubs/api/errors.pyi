from collections.abc import Mapping
from typing import Optional

from .jsonrpc import ApplicationError

class AuthenticationRequired(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class BackendNotAvailable(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class BackendTimeout(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class BackendError(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class TooManyRequests(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class UnknownBackendResponse(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class InvalidCredentials(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class NetworkError(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class ProtocolError(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class TemporaryBlocked(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class Banned(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class AccessDenied(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class FailedParsingManifest(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class TooManyMessagesSent(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class IncoherentLastMessage(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class MessageNotFound(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...

class ImportInProgress(ApplicationError):
    def __init__(self, message: str, data: Optional[Mapping]) -> None: ...
