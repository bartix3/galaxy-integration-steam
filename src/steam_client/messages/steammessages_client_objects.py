from __future__ import annotations
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_client_objects.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto

from .enums import EBluetoothDeviceType, ECPUGovernor, EGPUPerformanceLevel, EGraphicsPerfOverlayLevel, EHDRToneMapOperator, EOSBranch, ESDCardFormatStage, ESplitScalingFilter, ESplitScalingScaler, EStorageBlockContentType, EStorageBlockFileSystemType, EStorageDriveMediaType, ESystemAudioChannel, ESystemAudioDirection, ESystemAudioPortDirection, ESystemAudioPortType, ESystemDisplayCompatibilityMode, ESystemFanControlMode, ESystemServiceState, EUpdaterState, EUpdaterType


class ECloudPendingRemoteOperation(betterproto.Enum):
    k_ECloudPendingRemoteOperationNone = 0
    k_ECloudPendingRemoteOperationAppSessionActive = 1
    k_ECloudPendingRemoteOperationUploadInProgress = 2
    k_ECloudPendingRemoteOperationUploadPending = 3
    k_ECloudPendingRemoteOperationAppSessionSuspended = 4


class ESteamDeckKeyboardLayout(betterproto.Enum):
    k_ESteamDeckKeyboardLayout_QWERTY = 0
    k_ESteamDeckKeyboardLayout_Bulgarian = 1
    k_ESteamDeckKeyboardLayout_Chinese_Simplified = 2
    k_ESteamDeckKeyboardLayout_Chinese_Traditional = 3
    k_ESteamDeckKeyboardLayout_Czech = 4
    k_ESteamDeckKeyboardLayout_Danish = 5
    k_ESteamDeckKeyboardLayout_Finnish = 6
    k_ESteamDeckKeyboardLayout_French = 7
    k_ESteamDeckKeyboardLayout_German = 8
    k_ESteamDeckKeyboardLayout_Greek = 9
    k_ESteamDeckKeyboardLayout_Hungarian = 10
    k_ESteamDeckKeyboardLayout_Italian = 11
    k_ESteamDeckKeyboardLayout_Japanese = 12
    k_ESteamDeckKeyboardLayout_Korean = 13
    k_ESteamDeckKeyboardLayout_Norwegian = 14
    k_ESteamDeckKeyboardLayout_Polish = 15
    k_ESteamDeckKeyboardLayout_Portuguese = 16
    k_ESteamDeckKeyboardLayout_Romanian = 17
    k_ESteamDeckKeyboardLayout_Russian = 18
    k_ESteamDeckKeyboardLayout_Spanish = 19
    k_ESteamDeckKeyboardLayout_Swedish = 20
    k_ESteamDeckKeyboardLayout_Thai = 21
    k_ESteamDeckKeyboardLayout_Turkish_F = 22
    k_ESteamDeckKeyboardLayout_Turkish_Q = 23
    k_ESteamDeckKeyboardLayout_Ukrainian = 24
    k_ESteamDeckKeyboardLayout_Vietnamese = 25
    k_ESteamDeckKeyboardLayout_QWERTY_International = 26
    k_ESteamDeckKeyboardLayout_Dvorak = 27
    k_ESteamDeckKeyboardLayout_Colemak = 28
    k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional = 29
    k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic = 30
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo = 31
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie = 32
    k_ESteamDeckKeyboardLayout_Japanese_Kana = 33
    k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick = 34


@dataclass
class SteamMessagesClientIClientForcedEnumDependencies(betterproto.Message):
    a: EBluetoothDeviceType = betterproto.enum_field(1)
    b: EStorageBlockContentType = betterproto.enum_field(2)
    c: EStorageBlockFileSystemType = betterproto.enum_field(3)
    d: ESDCardFormatStage = betterproto.enum_field(4)


@dataclass
class CMsgNetworkDeviceIP4Address(betterproto.Message):
    ip: int = betterproto.int32_field(1)
    netmask: int = betterproto.int32_field(2)


@dataclass
class CMsgNetworkDeviceIP4Config(betterproto.Message):
    addresses: List[CMsgNetworkDeviceIP4Address] = betterproto.message_field(1)
    dns_ip: List[int] = betterproto.int32_field(2)
    gateway_ip: int = betterproto.int32_field(3)
    is_dhcp_enabled: bool = betterproto.bool_field(4)
    is_default_route: bool = betterproto.bool_field(5)
    is_enabled: bool = betterproto.bool_field(6)


@dataclass
class CMsgNetworkDeviceIP6Address(betterproto.Message):
    ip: str = betterproto.string_field(1)


@dataclass
class CMsgNetworkDeviceIP6Config(betterproto.Message):
    addresses: List[CMsgNetworkDeviceIP6Address] = betterproto.message_field(1)
    dns_ip: List[str] = betterproto.string_field(2)
    gateway_ip: str = betterproto.string_field(3)
    is_dhcp_enabled: bool = betterproto.bool_field(4)
    is_default_route: bool = betterproto.bool_field(5)
    is_enabled: bool = betterproto.bool_field(6)


@dataclass
class CMsgNetworkDevicesData(betterproto.Message):
    devices: List[CMsgNetworkDevicesDataDevice] = betterproto.message_field(1)
    is_wifi_enabled: bool = betterproto.bool_field(2)
    is_wifi_scanning_enabled: bool = betterproto.bool_field(3)


@dataclass
class CMsgNetworkDevicesDataDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    etype: int = betterproto.int32_field(2)
    estate: int = betterproto.int32_field(3)
    mac: str = betterproto.string_field(4)
    vendor: str = betterproto.string_field(5)
    product: str = betterproto.string_field(6)
    ip4: CMsgNetworkDeviceIP4Config = betterproto.message_field(7)
    ip6: CMsgNetworkDeviceIP6Config = betterproto.message_field(8)
    wired: CMsgNetworkDevicesDataDeviceWired = betterproto.message_field(9)
    wireless: CMsgNetworkDevicesDataDeviceWireless = betterproto.message_field(10)


@dataclass
class CMsgNetworkDevicesDataDeviceWired(betterproto.Message):
    is_cable_present: bool = betterproto.bool_field(1)
    speed_mbit: int = betterproto.uint32_field(2)
    friendly_name: str = betterproto.string_field(3)


@dataclass
class CMsgNetworkDevicesDataDeviceWireless(betterproto.Message):
    aps: List[CMsgNetworkDevicesDataDeviceWirelessAP] = betterproto.message_field(1)
    esecurity_supported: int = betterproto.int32_field(2)


@dataclass
class CMsgNetworkDevicesDataDeviceWirelessAP(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    estrength: int = betterproto.int32_field(2)
    ssid: str = betterproto.string_field(3)
    is_active: bool = betterproto.bool_field(4)
    is_autoconnect: bool = betterproto.bool_field(5)
    esecurity: int = betterproto.int32_field(6)
    user_name: str = betterproto.string_field(7)
    password: str = betterproto.string_field(8)
    strength_raw: int = betterproto.int32_field(9)


@dataclass
class CMsgNetworkDeviceConnect(betterproto.Message):
    device_id: int = betterproto.uint32_field(1)
    credentials: CMsgNetworkDeviceConnectCredentials = betterproto.message_field(4)
    ip4: CMsgNetworkDeviceIP4Config = betterproto.message_field(5)
    ip6: CMsgNetworkDeviceIP6Config = betterproto.message_field(6)
    ap_known: CMsgNetworkDeviceConnectKnownAP = betterproto.message_field(
        2, group="ap_info"
    )
    ap_custom: CMsgNetworkDeviceConnectCustomAP = betterproto.message_field(
        3, group="ap_info"
    )


@dataclass
class CMsgNetworkDeviceConnectKnownAP(betterproto.Message):
    ap_id: int = betterproto.uint32_field(1)


@dataclass
class CMsgNetworkDeviceConnectCustomAP(betterproto.Message):
    ssid: str = betterproto.string_field(1)
    esecurity: int = betterproto.int32_field(2)


@dataclass
class CMsgNetworkDeviceConnectCredentials(betterproto.Message):
    username: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass
class CMsgStorageDevicesData(betterproto.Message):
    drives: List[CMsgStorageDevicesDataDrive] = betterproto.message_field(1)
    block_devices: List[
        CMsgStorageDevicesDataBlockDevice
    ] = betterproto.message_field(2)
    is_unmount_supported: bool = betterproto.bool_field(3)
    is_trim_supported: bool = betterproto.bool_field(4)
    is_trim_running: bool = betterproto.bool_field(5)


@dataclass
class CMsgStorageDevicesDataDrive(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    model: str = betterproto.string_field(2)
    vendor: str = betterproto.string_field(3)
    serial: str = betterproto.string_field(4)
    is_ejectable: bool = betterproto.bool_field(5)
    size_bytes: int = betterproto.uint64_field(6)
    media_type: EStorageDriveMediaType = betterproto.enum_field(7)


@dataclass
class CMsgStorageDevicesDataBlockDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    drive_id: int = betterproto.uint32_field(2)
    path: str = betterproto.string_field(3)
    friendly_path: str = betterproto.string_field(4)
    label: str = betterproto.string_field(5)
    size_bytes: int = betterproto.uint64_field(6)
    is_formattable: bool = betterproto.bool_field(7)
    is_read_only: bool = betterproto.bool_field(8)
    is_root_device: bool = betterproto.bool_field(9)
    content_type: EStorageBlockContentType = betterproto.enum_field(10)
    filesystem_type: EStorageBlockFileSystemType = betterproto.enum_field(11)
    mount_path: str = betterproto.string_field(12)


@dataclass
class CCloud_PendingRemoteOperation(betterproto.Message):
    operation: ECloudPendingRemoteOperation = betterproto.enum_field(1)
    machine_name: str = betterproto.string_field(2)
    client_id: int = betterproto.uint64_field(3)
    time_last_updated: int = betterproto.uint32_field(4)


@dataclass
class CMsgCloudPendingRemoteOperations(betterproto.Message):
    operations: List[CCloud_PendingRemoteOperation] = betterproto.message_field(1)


@dataclass
class CMsgBluetoothDevicesData(betterproto.Message):
    adapters: List[CMsgBluetoothDevicesDataAdapter] = betterproto.message_field(1)
    devices: List[CMsgBluetoothDevicesDataDevice] = betterproto.message_field(2)
    manager: CMsgBluetoothDevicesDataManager = betterproto.message_field(3)


@dataclass
class CMsgBluetoothDevicesDataAdapter(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    mac: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    is_enabled: bool = betterproto.bool_field(4)
    is_discovering: bool = betterproto.bool_field(5)


@dataclass
class CMsgBluetoothDevicesDataDevice(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    adapter_id: int = betterproto.uint32_field(2)
    etype: EBluetoothDeviceType = betterproto.enum_field(3)
    mac: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)
    is_connected: bool = betterproto.bool_field(6)
    is_paired: bool = betterproto.bool_field(7)
    strength_raw: int = betterproto.int32_field(8)


@dataclass
class CMsgBluetoothDevicesDataManager(betterproto.Message):
    is_bluetooth_enabled: bool = betterproto.bool_field(1)


@dataclass
class CMsgSystemPerfDiagnosticEntry(betterproto.Message):
    name: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class CMsgSystemPerfNetworkInterface(betterproto.Message):
    name: str = betterproto.string_field(1)
    timestamp: float = betterproto.double_field(2)
    tx_bytes_total: int = betterproto.int64_field(3)
    rx_bytes_total: int = betterproto.int64_field(4)
    tx_bytes_per_sec: int = betterproto.int32_field(5)
    rx_bytes_per_sec: int = betterproto.int32_field(6)


@dataclass
class CMsgSystemPerfDiagnosticInfo(betterproto.Message):
    entries: List[CMsgSystemPerfDiagnosticEntry] = betterproto.message_field(1)
    interfaces: List[CMsgSystemPerfNetworkInterface] = betterproto.message_field(2)
    battery_temp_c: float = betterproto.float_field(3)


@dataclass
class CMsgSystemPerfLimits(betterproto.Message):
    cpu_governor_manual_min_mhz: int = betterproto.int32_field(1)
    cpu_governor_manual_max_mhz: int = betterproto.int32_field(2)
    fsr_sharpness_min: int = betterproto.int32_field(3)
    fsr_sharpness_max: int = betterproto.int32_field(4)
    gpu_performance_manual_min_mhz: int = betterproto.int32_field(5)
    gpu_performance_manual_max_mhz: int = betterproto.int32_field(6)
    perf_overlay_is_standalone: bool = betterproto.bool_field(7)
    is_dynamic_vrs_available: bool = betterproto.bool_field(8)
    is_manual_display_refresh_rate_available: bool = betterproto.bool_field(9)
    gpu_performance_levels_available: List[
        EGPUPerformanceLevel
    ] = betterproto.enum_field(10)
    display_refresh_manual_hz_min: int = betterproto.int32_field(11)
    display_refresh_manual_hz_max: int = betterproto.int32_field(12)
    fps_limit_options: List[int] = betterproto.int32_field(13)
    tdp_limit_min: int = betterproto.int32_field(14)
    tdp_limit_max: int = betterproto.int32_field(15)
    is_nis_supported: bool = betterproto.bool_field(16)
    nis_sharpness_min: int = betterproto.int32_field(17)
    nis_sharpness_max: int = betterproto.int32_field(18)
    display_external_refresh_manual_hz_min: int = betterproto.int32_field(19)
    display_external_refresh_manual_hz_max: int = betterproto.int32_field(20)
    fps_limit_options_external: List[int] = betterproto.int32_field(21)
    is_tearing_supported: bool = betterproto.bool_field(22)
    is_vrr_supported: bool = betterproto.bool_field(23)
    is_dynamic_refresh_rate_in_steam_supported: bool = betterproto.bool_field(24)
    is_split_scaling_and_filtering_supported: bool = betterproto.bool_field(25)
    split_scaling_filters_available: List[
        ESplitScalingFilter
    ] = betterproto.enum_field(26)
    split_scaling_scalers_available: List[
        ESplitScalingScaler
    ] = betterproto.enum_field(27)
    is_hdr_supported: bool = betterproto.bool_field(28)
    display_refresh_manual_hz_oc_max: int = betterproto.int32_field(29)


@dataclass
class CMsgSystemPerfSettingsGlobal(betterproto.Message):
    diagnostic_update_rate: float = betterproto.float_field(1)
    system_trace_service_state: ESystemServiceState = betterproto.enum_field(2)
    graphics_profiling_service_state: ESystemServiceState = betterproto.enum_field(3)
    perf_overlay_service_state: ESystemServiceState = betterproto.enum_field(4)
    perf_overlay_level: EGraphicsPerfOverlayLevel = betterproto.enum_field(5)
    is_show_perf_overlay_over_steam_enabled: bool = betterproto.bool_field(6)
    is_advanced_settings_enabled: bool = betterproto.bool_field(7)
    allow_external_display_refresh_control: bool = betterproto.bool_field(8)
    is_hdr_enabled: bool = betterproto.bool_field(9)
    hdr_on_sdr_tonemap_operator: EHDRToneMapOperator = betterproto.enum_field(12)
    is_hdr_debug_heatmap_enabled: bool = betterproto.bool_field(13)
    force_hdr_wide_gammut_for_sdr: bool = betterproto.bool_field(15)
    allow_experimental_hdr: bool = betterproto.bool_field(16)
    sdr_to_hdr_brightness: float = betterproto.float_field(17)
    debug_force_hdr_support: bool = betterproto.bool_field(18)
    force_hdr_10pq_output_debug: bool = betterproto.bool_field(19)
    is_display_oc_enabled: bool = betterproto.bool_field(20)
    is_color_management_enabled: bool = betterproto.bool_field(21)


@dataclass
class CMsgSystemPerfSettingsPerApp(betterproto.Message):
    gpu_performance_manual_mhz: int = betterproto.int32_field(1)
    fps_limit: int = betterproto.int32_field(2)
    is_variable_resolution_enabled: bool = betterproto.bool_field(3)
    is_dynamic_refresh_rate_enabled: bool = betterproto.bool_field(4)
    tdp_limit: int = betterproto.int32_field(5)
    cpu_governor: ECPUGovernor = betterproto.enum_field(6)
    cpu_governor_manual_mhz: int = betterproto.int32_field(7)
    scaling_filter: int = betterproto.int32_field(8)
    fsr_sharpness: int = betterproto.int32_field(9)
    is_fps_limit_enabled: bool = betterproto.bool_field(10)
    is_tdp_limit_enabled: bool = betterproto.bool_field(11)
    is_low_latency_mode_enabled: bool = betterproto.bool_field(12)
    display_refresh_manual_hz: int = betterproto.int32_field(13)
    is_game_perf_profile_enabled: bool = betterproto.bool_field(14)
    gpu_performance_level: EGPUPerformanceLevel = betterproto.enum_field(15)
    nis_sharpness: int = betterproto.int32_field(16)
    display_external_refresh_manual_hz: int = betterproto.int32_field(17)
    fps_limit_external: int = betterproto.int32_field(18)
    is_tearing_enabled: bool = betterproto.bool_field(19)
    is_vrr_enabled: bool = betterproto.bool_field(20)
    is_composite_debug_enabled: bool = betterproto.bool_field(21)
    force_composite: bool = betterproto.bool_field(22)
    use_dynamic_refresh_rate_in_steam: bool = betterproto.bool_field(23)
    split_scaling_filter: ESplitScalingFilter = betterproto.enum_field(24)
    split_scaling_scaler: ESplitScalingScaler = betterproto.enum_field(25)


@dataclass
class CMsgSystemPerfSettings(betterproto.Message):
    global_: CMsgSystemPerfSettingsGlobal = betterproto.message_field(1)
    per_app: CMsgSystemPerfSettingsPerApp = betterproto.message_field(2)


@dataclass
class CMsgSystemPerfSettingsV1(betterproto.Message):
    diagnostic_update_rate: float = betterproto.float_field(1)
    system_trace_service_state: ESystemServiceState = betterproto.enum_field(2)
    graphics_profiling_service_state: ESystemServiceState = betterproto.enum_field(3)
    perf_overlay_service_state: ESystemServiceState = betterproto.enum_field(4)
    perf_overlay_level: EGraphicsPerfOverlayLevel = betterproto.enum_field(5)
    gpu_performance_level: EGPUPerformanceLevel = betterproto.enum_field(6)
    gpu_performance_manual_mhz: int = betterproto.int32_field(7)
    fps_limit: int = betterproto.int32_field(8)
    is_variable_resolution_enabled: bool = betterproto.bool_field(9)
    is_dynamic_refresh_rate_enabled: bool = betterproto.bool_field(10)
    tdp_limit: int = betterproto.int32_field(11)
    cpu_governor: ECPUGovernor = betterproto.enum_field(12)
    cpu_governor_manual_mhz: int = betterproto.int32_field(13)
    scaling_filter: int = betterproto.int32_field(14)
    fsr_sharpness: int = betterproto.int32_field(15)
    is_fps_limit_enabled: bool = betterproto.bool_field(16)
    is_tdp_limit_enabled: bool = betterproto.bool_field(17)
    is_show_perf_overlay_over_steam_enabled: bool = betterproto.bool_field(18)
    is_low_latency_mode_enabled: bool = betterproto.bool_field(19)
    display_refresh_manual_hz: int = betterproto.int32_field(20)
    is_game_perf_profile_enabled: bool = betterproto.bool_field(21)


@dataclass
class CMsgSystemPerfState(betterproto.Message):
    limits: CMsgSystemPerfLimits = betterproto.message_field(1)
    settings: CMsgSystemPerfSettings = betterproto.message_field(2)
    current_game_id: int = betterproto.uint64_field(3)
    active_profile_game_id: int = betterproto.uint64_field(4)


@dataclass
class CMsgSystemPerfUpdateSettings(betterproto.Message):
    gameid: int = betterproto.uint64_field(1)
    skip_storage_update: bool = betterproto.bool_field(4)
    reset_to_default: bool = betterproto.bool_field(2, group="update")
    settings_delta: CMsgSystemPerfSettings = betterproto.message_field(
        3, group="update"
    )


@dataclass
class CMsgSystemDockUpdateState(betterproto.Message):
    state: EUpdaterState = betterproto.enum_field(1)
    rtime_last_checked: float = betterproto.fixed32_field(2)
    version_current: str = betterproto.string_field(3)
    version_available: str = betterproto.string_field(4)
    stage_progress: float = betterproto.float_field(5)
    rtime_estimated_completion: float = betterproto.fixed32_field(6)
    old_fw_workaround: int = betterproto.int32_field(7)


@dataclass
class CMsgSystemDockState(betterproto.Message):
    update_state: CMsgSystemDockUpdateState = betterproto.message_field(1)


@dataclass
class CMsgSystemDockUpdateFirmware(betterproto.Message):
    check_only: bool = betterproto.bool_field(1)


@dataclass
class CMsgSystemAudioVolume(betterproto.Message):
    entries: List[CMsgSystemAudioVolumeChannelEntry] = betterproto.message_field(1)
    is_muted: bool = betterproto.bool_field(2)


@dataclass
class CMsgSystemAudioVolumeChannelEntry(betterproto.Message):
    echannel: ESystemAudioChannel = betterproto.enum_field(1)
    volume: float = betterproto.float_field(2)


@dataclass
class CMsgSystemAudioManagerObject(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    rtime_last_update: float = betterproto.fixed32_field(2)


@dataclass
class CMsgSystemAudioManagerDevice(betterproto.Message):
    base: CMsgSystemAudioManagerObject = betterproto.message_field(1)
    name: str = betterproto.string_field(2)
    nick: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    api: str = betterproto.string_field(5)


@dataclass
class CMsgSystemAudioManagerNode(betterproto.Message):
    base: CMsgSystemAudioManagerObject = betterproto.message_field(1)
    device_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    nick: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    edirection: ESystemAudioDirection = betterproto.enum_field(6)
    volume: CMsgSystemAudioVolume = betterproto.message_field(7)


@dataclass
class CMsgSystemAudioManagerPort(betterproto.Message):
    base: CMsgSystemAudioManagerObject = betterproto.message_field(1)
    node_id: int = betterproto.uint32_field(3)
    name: str = betterproto.string_field(4)
    alias: str = betterproto.string_field(5)
    etype: ESystemAudioPortType = betterproto.enum_field(6)
    edirection: ESystemAudioPortDirection = betterproto.enum_field(7)
    is_physical: bool = betterproto.bool_field(8)
    is_terminal: bool = betterproto.bool_field(9)
    is_control: bool = betterproto.bool_field(10)
    is_monitor: bool = betterproto.bool_field(11)


@dataclass
class CMsgSystemAudioManagerLink(betterproto.Message):
    base: CMsgSystemAudioManagerObject = betterproto.message_field(1)
    output_node_id: int = betterproto.uint32_field(2)
    output_port_id: int = betterproto.uint32_field(3)
    input_node_id: int = betterproto.uint32_field(4)
    input_port_id: int = betterproto.uint32_field(5)


@dataclass
class CMsgSystemAudioManagerStateHW(betterproto.Message):
    devices: List[CMsgSystemAudioManagerDevice] = betterproto.message_field(1)
    nodes: List[CMsgSystemAudioManagerNode] = betterproto.message_field(2)
    ports: List[CMsgSystemAudioManagerPort] = betterproto.message_field(3)
    links: List[CMsgSystemAudioManagerLink] = betterproto.message_field(4)


@dataclass
class CMsgSystemAudioManagerState(betterproto.Message):
    rtime_filter: float = betterproto.fixed32_field(1)
    counter: int = betterproto.int32_field(2)
    hw: CMsgSystemAudioManagerStateHW = betterproto.message_field(3)


@dataclass
class CMsgSystemAudioManagerUpdateSomething(betterproto.Message):
    counter: int = betterproto.int32_field(1)


@dataclass
class CMsgSystemDisplayMode(betterproto.Message):
    id: int = betterproto.int32_field(1)
    width: int = betterproto.int32_field(2)
    height: int = betterproto.int32_field(3)
    refresh_hz: int = betterproto.int32_field(4)


@dataclass
class CMsgSystemDisplay(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    is_primary: bool = betterproto.bool_field(4)
    is_enabled: bool = betterproto.bool_field(5)
    is_internal: bool = betterproto.bool_field(6)
    has_mode_override: bool = betterproto.bool_field(7)
    width_mm: int = betterproto.int32_field(8)
    height_mm: int = betterproto.int32_field(9)
    current_mode_id: int = betterproto.int32_field(10)
    modes: List[CMsgSystemDisplayMode] = betterproto.message_field(11)
    refresh_rate_min: int = betterproto.int32_field(12)
    refresh_rate_max: int = betterproto.int32_field(13)
    is_vrr_capable: bool = betterproto.bool_field(14)
    is_vrr_enabled: bool = betterproto.bool_field(15)
    is_hdr_capable: bool = betterproto.bool_field(16)
    is_hdr_enabled: bool = betterproto.bool_field(17)


@dataclass
class CMsgSystemDisplayManagerState(betterproto.Message):
    displays: List[CMsgSystemDisplay] = betterproto.message_field(1)
    is_mode_switching_supported: bool = betterproto.bool_field(2)
    compatibility_mode: ESystemDisplayCompatibilityMode = betterproto.enum_field(3)


@dataclass
class CMsgSystemDisplayManagerSetMode(betterproto.Message):
    display_id: int = betterproto.int32_field(1)
    mode_id: int = betterproto.int32_field(2)


@dataclass
class CMsgSystemManagerSettings(betterproto.Message):
    idle_backlight_dim_battery_seconds: float = betterproto.float_field(1)
    idle_backlight_dim_ac_seconds: float = betterproto.float_field(2)
    idle_suspend_battery_seconds: float = betterproto.float_field(3)
    idle_suspend_ac_seconds: float = betterproto.float_field(4)
    idle_suspend_supressed: bool = betterproto.bool_field(5)
    is_adaptive_brightness_available: bool = betterproto.bool_field(6)
    display_adaptive_brightness_enabled: bool = betterproto.bool_field(7)
    display_nightmode_enabled: bool = betterproto.bool_field(10)
    display_nightmode_tintstrength: float = betterproto.float_field(11)
    display_nightmode_maxhue: float = betterproto.float_field(12)
    display_nightmode_maxsat: float = betterproto.float_field(13)
    display_nightmode_uiexp: float = betterproto.float_field(14)
    display_nightmode_blend: float = betterproto.float_field(15)
    display_nightmode_reset: bool = betterproto.bool_field(16)
    display_nightmode_schedule_enabled: bool = betterproto.bool_field(17)
    display_nightmode_schedule_starttime: float = betterproto.float_field(18)
    display_nightmode_schedule_endtime: float = betterproto.float_field(19)
    display_diagnostics_enabled: bool = betterproto.bool_field(20)
    als_lux_latest: float = betterproto.float_field(21)
    als_lux_median: float = betterproto.float_field(22)
    display_backlight_raw: float = betterproto.float_field(23)
    display_brightness_adaptivemin: float = betterproto.float_field(24)
    display_brightness_adaptivemax: float = betterproto.float_field(25)
    is_wifi_powersave_enabled: bool = betterproto.bool_field(26)
    is_fan_control_available: bool = betterproto.bool_field(27)
    fan_control_mode: ESystemFanControlMode = betterproto.enum_field(28)
    is_display_brightness_available: bool = betterproto.bool_field(29)
    is_display_colormanagement_available: bool = betterproto.bool_field(31)
    display_colorgamut: float = betterproto.float_field(32)


@dataclass
class CMsgSelectOSBranchParams(betterproto.Message):
    branch: EOSBranch = betterproto.enum_field(1)
    custom_branch: str = betterproto.string_field(2)


@dataclass
class CMsgSystemUpdateProgress(betterproto.Message):
    stage_progress: float = betterproto.float_field(1)
    stage_size_bytes: int = betterproto.int64_field(2)
    rtime_estimated_completion: float = betterproto.fixed32_field(3)


@dataclass
class CMsgSystemUpdateCheckResult(betterproto.Message):
    type: EUpdaterType = betterproto.enum_field(1)
    eresult: int = betterproto.uint32_field(2)
    rtime_checked: float = betterproto.fixed32_field(3)
    available: bool = betterproto.bool_field(4)
    version: str = betterproto.string_field(5)
    auto_message: str = betterproto.string_field(6)


@dataclass
class CMsgSystemUpdateApplyParams(betterproto.Message):
    apply_types: List[EUpdaterType] = betterproto.enum_field(1)


@dataclass
class CMsgSystemUpdateApplyResult(betterproto.Message):
    type: EUpdaterType = betterproto.enum_field(1)
    eresult: int = betterproto.uint32_field(2)
    requires_client_restart: bool = betterproto.bool_field(3)
    requires_system_restart: bool = betterproto.bool_field(4)


@dataclass
class CMsgSystemUpdateState(betterproto.Message):
    state: EUpdaterState = betterproto.enum_field(1)
    progress: CMsgSystemUpdateProgress = betterproto.message_field(2)
    update_check_results: List[
        CMsgSystemUpdateCheckResult
    ] = betterproto.message_field(3)
    update_apply_results: List[
        CMsgSystemUpdateApplyResult
    ] = betterproto.message_field(4)
    supports_os_updates: bool = betterproto.bool_field(5)


@dataclass
class CMsgAchievementChange(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass
class CMsgCellList(betterproto.Message):
    cells: List[CMsgCellListCell] = betterproto.message_field(1)


@dataclass
class CMsgCellListCell(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    loc_name: str = betterproto.string_field(2)


@dataclass
class CMsgShortcutInfo(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    exe: str = betterproto.string_field(2)
    start_dir: str = betterproto.string_field(3)
    icon: str = betterproto.string_field(4)
    path: str = betterproto.string_field(5)
    args: str = betterproto.string_field(6)
    app_name: str = betterproto.string_field(7)
    override_appid: int = betterproto.uint32_field(8)
    flatpak_appid: str = betterproto.string_field(9)
    tags: List[str] = betterproto.string_field(10)
    is_remote: bool = betterproto.bool_field(11)
    is_hidden: bool = betterproto.bool_field(12)
    is_temporary: bool = betterproto.bool_field(13)
    is_openvr: bool = betterproto.bool_field(14)
    allow_desktop_config: bool = betterproto.bool_field(15)
    allow_overlay: bool = betterproto.bool_field(16)
    rt_last_played_time: int = betterproto.uint32_field(17)
    is_devkit_shortcut: bool = betterproto.bool_field(18)
    devkit_gameid: str = betterproto.string_field(19)


@dataclass
class CMsgShortcutAppIds(betterproto.Message):
    appids: List[int] = betterproto.uint32_field(1)


@dataclass
class CMsgMonitorInfo(betterproto.Message):
    selected_display_name: str = betterproto.string_field(1)
    monitors: List[CMsgMonitorInfoMonitorInfo] = betterproto.message_field(2)


@dataclass
class CMsgMonitorInfoMonitorInfo(betterproto.Message):
    monitor_device_name: str = betterproto.string_field(1)
    monitor_display_name: str = betterproto.string_field(2)


@dataclass
class CMsgGenerateSystemReportReply(betterproto.Message):
    report_id: str = betterproto.string_field(1)


@dataclass
class CMsgWebUITransportInfo(betterproto.Message):
    port: int = betterproto.uint32_field(1)
    auth_key: str = betterproto.string_field(2)
